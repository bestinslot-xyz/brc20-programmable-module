apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "brc20-programmable-module.fullname" . }}
  labels:
    {{- include "brc20-programmable-module.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "brc20-programmable-module.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "brc20-programmable-module.selectorLabels" . | nindent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: role
                  operator: NotIn
                  values: ["dedicated"]
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "brc20-programmable-module.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
          - name: BRC20_PROG_DB_PATH
            value: "/data/db"
          - name: BRC20_PROG_RPC_SERVER_URL
            value: "0.0.0.0:{{ .Values.service.port }}"
          - name: BRC20_PROG_RPC_SERVER_ENABLE_AUTH
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configMapName }}
                key: brc20Prog.rpcServerEnableAuth
          - name: BRC20_PROG_RPC_SERVER_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configMapName }}
                key: brc20Prog.rpcServerUser
          - name: BRC20_PROG_RPC_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: brc20-prog-rpc-server-credentials
                key: password
          - name: BRC20_PROG_BALANCE_SERVER_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configMapName }}
                key: brc20Prog.balanceServerUrl
          - name: BITCOIN_RPC_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configMapName }}
                key: rpc.url
          - name: BITCOIN_RPC_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configMapName }}
                key: rpc.user
          - name: BITCOIN_RPC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: rpc-credentials
                key: password
          - name: BITCOIN_RPC_NETWORK
            valueFrom:
              configMapKeyRef:
                name: {{ .Values.configMapName }}
                key: networkType
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: brc20-programmable-module-storage
              mountPath: /data
      volumes:
        - name: brc20-programmable-module-storage
          persistentVolumeClaim:
            claimName: {{ include "brc20-programmable-module.fullname" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
